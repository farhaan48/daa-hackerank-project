# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10dMjfrPSSO0z-PvYmUgmkppKjz8Dk2z2
"""

def quickSort(pivot, arr):
    left = []
    equal = []
    right = []

    for num in arr:
        if num < pivot:
            left.append(num)
        elif num > pivot:
            right.append(num)
        else:
            equal.append(num)

    return left + equal + right

def main():
    print("Welcome to the Quicksort Partition Example")
    print("=========================================")

def unboundedKnapsack(k, arr):
    # Initialize dp array with False, indicating unreachable sums
    dp = [False] * (k + 1)
    dp[0] = True  # Base case: sum of 0 is always achievable

    for num in arr:
        for j in range(num, k + 1):
            if dp[j - num]:
                dp[j] = True

    # Find the maximum sum closest to but not exceeding k
    max_sum = 0
    for j in range(k, -1, -1):
        if dp[j]:
            max_sum = j
            break

    return max_sum

def main():
    print("Welcome to the Unbounded Knapsack Problem Solver")
    print("================================================\n")

    # Input number of test cases
    t = int(input("Enter the number of test cases: ").strip())
    print()

    results = []

    # Process each test case
    for case_num in range(1, t + 1):
        print(f"Test Case #{case_num}:")

        # Input size of array and target sum
        n, k = map(int, input("Enter length of array and target sum (n k): ").strip().split())

        # Input array elements
        arr = list(map(int, input(f"Enter {n} space-separated integers for the array: ").strip().split()))

        # Calculate the maximum sum nearest to but not exceeding k
        result = unboundedKnapsack(k, arr)
        results.append(result)

        print(f"\nMaximum sum nearest to {k} but not exceeding it is: {result}\n")

    # Print results for all test cases
    print("\nResults for all test cases:")
    for idx, result in enumerate(results, start=1):
        print(f"Test Case #{idx}: {result}")

if __name__ == "__main__":
    main()